# Copyright (c) 2017 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

################################################################################

includes:
- ../app_locations.yml

################################################################################

# houdini
settings.tk-multi-loader2.houdini:
  action_mappings:
    Alembic Cache: [import]
    Houdini Scene: [merge]
    Image: [file_cop]
    Photoshop Image: [file_cop]
    Rendered Image: [file_cop]
    Texture: [file_cop]
  entities:
  - caption: Assets
    entity_type: Asset
    filters:
    - [project, is, '{context.project}']
    hierarchy: [sg_asset_type, code]
  - caption: Shots
    entity_type: Shot
    filters:
    - [project, is, '{context.project}']
    hierarchy: [sg_sequence, code]
  - caption: My Tasks
    entity_type: Task
    filters:
    - [task_assignees, is, '{context.user}']
    - [project, is, '{context.project}']
    hierarchy: [entity, content]
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"

# maya
settings.tk-multi-loader2.maya:
  action_mappings:
    Alembic Cache: [reference, import]
    Image: [texture_node, image_plane]
    Maya Scene: [reference, import]
    Photoshop Image: [texture_node, image_plane]
    Rendered Image: [texture_node, image_plane]
    Texture: [texture_node, image_plane]
  entities:
  - caption: Assets
    entity_type: Asset
    filters:
    - [project, is, "{context.project}"]
    hierarchy: [sg_asset_type, code]
  - caption: Shots
    entity_type: Shot
    filters:
    - [project, is, "{context.project}"]
    hierarchy: [sg_sequence, code]
  - caption: My Tasks
    entity_type: Task
    filters:
    - [task_assignees, is, "{context.user}"]
    - [project, is, "{context.project}"]
    hierarchy: [entity, content]
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"

# substance painter
settings.tk-multi-loader2.substancepainter:
  actions_hook: '{engine}/tk-multi-loader2/tk-substancepainter_actions.py'
  action_mappings:
    Image: [environment, colorlut, alpha, texture]
    Texture: [environment, colorlut, alpha, texture]
    Rendered Image: [environment, colorlut, alpha, texture]
    Substance Material Preset: [preset]
    Sppr File: [preset]
    PopcornFX : [script]
    Pkfx File : [script]
    Shader: [shader]
    Glsl File: [shader]
    Substance Export Preset: [export]
    Spexp File: [export]
    Substance Smart Material: [smartmaterial]
    Spsm File: [smartmaterial]
    Substance File: [basematerial, alpha, texture, filter, procedural, generator]
    Sbsar File: [basematerial, alpha, texture, filter, procedural, generator]
    Substance Smart Mask: [smartmask]
    Spmsk File: [smartmask]
  entities:
  - caption: Assets
    entity_type: Asset
    filters:
    - [project, is, "{context.project}"]
    hierarchy: [sg_asset_type, code]
  - caption: My Tasks
    entity_type: Task
    filters:
    - [task_assignees, is, "{context.user}"]
    - [project, is, "{context.project}"]
    hierarchy: [entity, content]
  publish_filters: [["sg_status_list", "is_not", null]]
  location: "@apps.tk-multi-loader2.location"
